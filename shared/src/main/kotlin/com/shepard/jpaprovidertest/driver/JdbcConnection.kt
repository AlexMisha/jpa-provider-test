package com.shepard.jpaprovidertest.driver

import com.shepard.jpaprovidertest.runner.JpaTestRunner
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Component
import java.io.InputStream
import java.io.OutputStream
import java.io.Reader
import java.io.Writer
import java.sql.*
import java.util.*
import java.util.concurrent.Executor
import java.util.logging.Logger
import javax.sql.rowset.serial.SerialBlob
import javax.sql.rowset.serial.SerialClob
import javax.sql.rowset.serial.SerialStruct
import javax.xml.transform.Result
import javax.xml.transform.Source

fun jdbcConnection(): Connection = JdbcConnection()

fun nClob(): NClob = NClobImpl()
fun sqlArray(): java.sql.Array = SqlArray()
fun sqlData(): SQLData = SqlDataImpl()
fun savepoint(): Savepoint = SavepointImpl()
fun sqlXml(): SQLXML = SqlXmlImpl()

@Component
class JdbcConnection : Connection {
    @Autowired
    lateinit var jpaTestRunner: JpaTestRunner

    private val logger: Logger = Logger.getLogger(this.javaClass.name)

    override fun prepareStatement(sql: String?): PreparedStatement {
        logger.info("prepareStatement sql: $sql")
        logger.info("currentTest: ${jpaTestRunner.currentTest.name}")
        return preparedStatement(jpaTestRunner.currentTest)
    }

    override fun prepareStatement(sql: String?, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement {
        logger.info("prepareStatement sql: $sql, resultSetType: $resultSetType, " +
                "resultSetConcurrency: $resultSetConcurrency")
        return prepareStatement(sql)
    }

    override fun prepareStatement(sql: String?, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): PreparedStatement {
        logger.info("prepareStatement sql: $sql, resultSetType: $resultSetType, " +
                "resultSetConcurrency: $resultSetConcurrency, resultSetHoldability: $resultSetHoldability")
        return prepareStatement(sql)
    }

    override fun prepareStatement(sql: String?, autoGeneratedKeys: Int): PreparedStatement {
        logger.info("prepareStatement sql: $sql, autoGeneratedKeys: $autoGeneratedKeys")
        return prepareStatement(sql)
    }

    override fun prepareStatement(sql: String?, columnIndexes: IntArray?): PreparedStatement {
        logger.info("prepareStatement sql: $sql, columnIndexes: $columnIndexes")
        return prepareStatement(sql)
    }

    override fun prepareStatement(sql: String?, columnNames: Array<out String>?): PreparedStatement {
        logger.info("prepareStatement sql: $sql, columnNames: $columnNames")
        return prepareStatement(sql)
    }

    override fun rollback() {
        logger.info("rollback")
    }

    override fun rollback(savepoint: Savepoint?) {
        logger.info("rollback savepoint: $savepoint")
    }

    override fun getHoldability(): Int {
        logger.info("getHoldability: 1")
        return 1
    }

    override fun setNetworkTimeout(executor: Executor?, milliseconds: Int) {
        logger.info("setNetworkTimeout executor: $executor, milliseconds: $milliseconds")
    }

    override fun commit() {
        logger.info("commit")
    }

    override fun <T : Any?> unwrap(iface: Class<T>?): T {
        logger.info("unwrap iface: $iface")
        return requireNotNull(iface).newInstance()
    }

    override fun setTransactionIsolation(level: Int) {
        logger.info("setTransactionIsolation level: $level")
    }

    override fun setAutoCommit(autoCommit: Boolean) {
        logger.info("setAutoCommit autoCommit: $autoCommit")
    }

    override fun abort(executor: Executor?) {
        logger.info("abort executor: $executor")
    }

    override fun prepareCall(sql: String?): CallableStatement {
        logger.info("prepareCall sql: $sql")
        return callableStatementOf(prepareStatement(sql))
    }

    override fun prepareCall(sql: String?, resultSetType: Int, resultSetConcurrency: Int): CallableStatement {
        logger.info("prepareCall sql: $sql, resultSetType: $resultSetType, " +
                "resultSrtConcurrency: $resultSetConcurrency")
        return callableStatementOf(prepareStatement(sql))
    }

    override fun prepareCall(sql: String?, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): CallableStatement {
        logger.info("prepareCall sql: $sql, resultSetType: $resultSetType, " +
                "resultSrtConcurrency: $resultSetConcurrency, resultSetHoldability: $resultSetHoldability")
        return callableStatementOf(prepareStatement(sql))
    }

    override fun getClientInfo(name: String?): String {
        logger.info("getClientInfo name: $name")
        return buildString { }
    }

    override fun getClientInfo(): Properties {
        logger.info("getClientInfo")
        return Properties()
    }

    override fun getAutoCommit(): Boolean {
        logger.info("getAutoCommit: false")
        return false
    }

    override fun setCatalog(catalog: String?) {
        logger.info("setCatalog catalog: $catalog")
    }

    override fun getWarnings(): SQLWarning {
        logger.info("getWarnings")
        return SQLWarning()
    }

    override fun getCatalog(): String {
        logger.info("getCatalog")
        return buildString { }
    }

    override fun setHoldability(holdability: Int) {
        logger.info("setHoldability holdability: $holdability")
    }

    override fun getSchema(): String {
        logger.info("getSchema")
        return buildString { }
    }

    override fun isValid(timeout: Int): Boolean {
        logger.info("isValid timeout: $timeout")
        return true
    }

    override fun close() {
        logger.info("close")
    }

    override fun isClosed(): Boolean {
        logger.info("isClosed: false")
        return false
    }

    override fun createNClob(): NClob {
        logger.info("createNClob")
        return nClob()
    }

    override fun createBlob(): Blob {
        logger.info("createBlob")
        return SerialBlob(byteArrayOf())
    }

    override fun createArrayOf(typeName: String?, elements: Array<out Any>?): java.sql.Array {
        logger.info("createArrayOf typeName: $typeName, elements: $elements")
        return sqlArray()
    }

    override fun setReadOnly(readOnly: Boolean) {
        logger.info("setReadOnly readOnly: $readOnly")
    }

    override fun isWrapperFor(iface: Class<*>?): Boolean {
        logger.info("isWrapperFor iface: $iface, false")
        return false
    }

    override fun nativeSQL(sql: String?): String {
        logger.info("nativeSql sql: $sql")
        return buildString { }
    }

    override fun createStruct(typeName: String?, attributes: Array<out Any>?): Struct {
        logger.info("createStruct typeName: $typeName, attributes: $attributes")
        return SerialStruct(sqlData(), mutableMapOf())
    }

    override fun setClientInfo(name: String?, value: String?) {
        logger.info("setClientInfo name: $name, value: $value")
    }

    override fun setClientInfo(properties: Properties?) {
        logger.info("setClientInfo properties: $properties")
    }

    override fun releaseSavepoint(savepoint: Savepoint?) {
        logger.info("releaseSavepoint savepoint: $savepoint")
    }

    override fun createClob(): Clob {
        logger.info("createClob")
        return SerialClob(charArrayOf())
    }

    override fun isReadOnly(): Boolean {
        logger.info("isReadOnly: false")
        return false
    }

    override fun createStatement(): Statement {
        logger.info("createStatement")
        return prepareStatement(buildString { })
    }

    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement {
        logger.info("prepareCall resultSetType: $resultSetType, " +
                "resultSrtConcurrency: $resultSetConcurrency")
        return prepareStatement(buildString { })
    }

    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement {
        logger.info("prepareCall resultSetType: $resultSetType, resultSrtConcurrency: $resultSetConcurrency")
        return prepareStatement(buildString { })
    }

    override fun setSavepoint(): Savepoint {
        logger.info("setSavepoint")
        return savepoint()
    }

    override fun setSavepoint(name: String?): Savepoint {
        logger.info("setSavepoint name: $name")
        return savepoint()
    }

    override fun getTypeMap(): MutableMap<String, Class<*>> {
        logger.info("getTypeMap")
        return mutableMapOf()
    }

    override fun clearWarnings() {
        logger.info("clearWarnings")
    }

    override fun getMetaData(): DatabaseMetaData {
        logger.info("getMetaData")
        return jdbcMetadata()
    }

    override fun getTransactionIsolation(): Int {
        logger.info("getTransactionIsolation: 1")
        return 1
    }

    override fun setSchema(schema: String?) {
        logger.info("setSchema schema: $schema")
    }

    override fun getNetworkTimeout(): Int {
        logger.info("getNetworkTimeout: 100000")
        return 100000
    }

    override fun setTypeMap(map: MutableMap<String, Class<*>>?) {
        logger.info("setTypeMap map: $map")
    }

    override fun createSQLXML(): SQLXML {
        logger.info("createSQLXML")
        return sqlXml()
    }
}

class NClobImpl : NClob {
    override fun getSubString(pos: Long, length: Int): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun length(): Long {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun free() {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setCharacterStream(pos: Long): Writer {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getCharacterStream(): Reader {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getCharacterStream(pos: Long, length: Long): Reader {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun truncate(len: Long) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun position(searchstr: String?, start: Long): Long {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun position(searchstr: Clob?, start: Long): Long {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setString(pos: Long, str: String?): Int {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setString(pos: Long, str: String?, offset: Int, len: Int): Int {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setAsciiStream(pos: Long): OutputStream {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getAsciiStream(): InputStream {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

}

class SqlArray : java.sql.Array {
    override fun getArray(): Any {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getArray(map: MutableMap<String, Class<*>>?): Any {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getArray(index: Long, count: Int): Any {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getArray(index: Long, count: Int, map: MutableMap<String, Class<*>>?): Any {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun free() {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getBaseTypeName(): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getResultSet(): ResultSet {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getResultSet(map: MutableMap<String, Class<*>>?): ResultSet {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getResultSet(index: Long, count: Int): ResultSet {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getResultSet(index: Long, count: Int, map: MutableMap<String, Class<*>>?): ResultSet {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getBaseType(): Int {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

}

class SqlDataImpl : SQLData {
    override fun readSQL(stream: SQLInput?, typeName: String?) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getSQLTypeName(): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun writeSQL(stream: SQLOutput?) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

}

class SavepointImpl : Savepoint {
    override fun getSavepointId(): Int {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getSavepointName(): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

}

class SqlXmlImpl : SQLXML {
    override fun setBinaryStream(): OutputStream {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun free() {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun <T : Source?> getSource(sourceClass: Class<T>?): T {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setCharacterStream(): Writer {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun setString(value: String?) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun <T : Result?> setResult(resultClass: Class<T>?): T {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getString(): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getBinaryStream(): InputStream {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun getCharacterStream(): Reader {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

}
